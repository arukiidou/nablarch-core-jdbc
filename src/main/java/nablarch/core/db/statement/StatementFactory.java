package nablarch.core.db.statement;

import java.sql.Connection;
import java.sql.SQLException;

import nablarch.core.db.DbExecutionContext;
import nablarch.core.util.annotation.Published;

/**
 * SQL実行用オブジェクトを生成するインタフェース。<br>
 *
 * @author Hisaaki Sioiri
 */
@Published(tag = "architect")
public interface StatementFactory {

    /**
     * {@link SqlPStatement}を生成し返却する。
     *
     * @param sql SQL文
     * @param con Connectionオブジェクト
     * @param context DB実行時のコンテキスト
     * @return SQL文を元に生成したStatementオブジェクト
     * @throws SQLException SQL文が不正な場合や、データベースアクセスエラーが発生した場合
     */
    SqlPStatement getSqlPStatement(final String sql, final Connection con, final DbExecutionContext context) throws SQLException;

    /**
     * {@link SqlPStatement}を生成し返却する。
     *
     * @param sql SQL文
     * @param con Connectionオブジェクト
     * @param context DB実行時のコンテキスト
     * @param selectOption 検索処理条件
     * @return SQL文を元に生成したStatementオブジェクト
     * @throws SQLException SQL文が不正な場合や、データベースアクセスエラーが発生した場合
     */
    SqlPStatement getSqlPStatement(final String sql, final Connection con, final DbExecutionContext context, SelectOption selectOption) throws SQLException;

    /**
     * 自動生成キーの取得機能を持つ{@link SqlPStatement}を生成し返却する。
     *
     * @param sql SQL文
     * @param con Connectionオブジェクト
     * @param autoGeneratedKeys 自動生成キーを返すかどうかを示すフラグ。{@link java.sql.Statement#RETURN_GENERATED_KEYS} または {@link java.sql.Statement#NO_GENERATED_KEYS}
     * @param context DB実行時のコンテキスト
     * @return SQL文を元に生成したStatementオブジェクト
     * @throws SQLException SQL文が不正な場合や、データベースアクセスエラーが発生した場合
     */
    SqlPStatement getSqlPStatement(final String sql, final Connection con, final int autoGeneratedKeys, final DbExecutionContext context) throws SQLException;

    /**
     * 自動生成キーの取得機能を持つ{@link SqlPStatement}を生成し返却する。
     *
     * @param sql SQL文
     * @param con Connectionオブジェクト
     * @param columnIndexes 挿入された行から返される列を示す列インデックスの配列
     * @param context DB実行時のコンテキスト
     * @return SQL文を元に生成したStatementオブジェクト
     * @throws SQLException SQL文が不正な場合や、データベースアクセスエラーが発生した場合
     */
    SqlPStatement getSqlPStatement(final String sql, final Connection con, final int[] columnIndexes, final DbExecutionContext context) throws SQLException;

    /**
     * 自動生成キーの取得機能を持つ{@link SqlPStatement}を生成し返却する。
     *
     * @param sql SQL文
     * @param con Connectionオブジェクト
     * @param columnNames 挿入された行から返される列を示す列名の配列
     * @param context DB実行時のコンテキスト
     * @return SQL文を元に生成したStatementオブジェクト
     * @throws SQLException SQL文が不正な場合や、データベースアクセスエラーが発生した場合
     */
    SqlStatement getSqlPStatement(String sql, Connection con, String[] columnNames, final DbExecutionContext context) throws SQLException;

    /**
     * SQL_IDから{@link SqlPStatement}を生成し返却する。
     *
     * @param sqlId SQL_ID
     * @param con Connectionオブジェクト
     * @param context DB実行時のコンテキスト
     * @return SQL_IDを元に生成したStatementオブジェクト
     * @throws SQLException SQL文が不正な場合や、データベースアクセスエラーが発生した場合
     */
    SqlPStatement getSqlPStatementBySqlId(final String sqlId,
            final Connection con, final DbExecutionContext context) throws SQLException;

    /**
     * {@link ParameterizedSqlPStatement}を生成し返却する。
     *
     * @param sql SQL文
     * @param con Connectionオブジェクト
     * @param context DB実行時のコンテキスト
     * @return SQL文を元に生成したStatementオブジェクト
     * @throws SQLException SQL文が不正な場合や、データベースアクセスエラーが発生した場合
     */
    ParameterizedSqlPStatement getParameterizedSqlPStatement(final String sql,
            final Connection con, final DbExecutionContext context) throws SQLException;


    /**
     * {@link ParameterizedSqlPStatement}を生成し返却する。
     *
     * @param sql SQL文
     * @param con Connectionオブジェクト
     * @param context DB実行時のコンテキスト
     * @param selectOption 検索処理条件
     * @return SQL文を元に生成したStatementオブジェクト
     * @throws SQLException SQL文が不正な場合や、データベースアクセスエラーが発生した場合
     */
    ParameterizedSqlPStatement getParameterizedSqlPStatement(final String sql,
            final Connection con, final DbExecutionContext context, SelectOption selectOption) throws SQLException;

    /**
     * SQL_IDから{@link ParameterizedSqlPStatement}を生成し返却する。
     *
     * @param sqlId SQL_ID
     * @param con Connectionオブジェクト
     * @param context DB実行時のコンテキスト
     * @return SQL_IDを元に生成したStatementオブジェクト
     * @throws SQLException SQL文が不正な場合や、データベースアクセスエラーが発生した場合
     */
    ParameterizedSqlPStatement getParameterizedSqlPStatementBySqlId(final String sqlId,
            final Connection con, final DbExecutionContext context) throws SQLException;

    /**
     * {@link SqlCStatement}を生成し返却する。
     *
     * @param sql SQL文
     * @param con Connectionオブジェクト
     * @param context DB実行時のコンテキスト
     * @return SQL文を元に生成したStatementオブジェクト
     * @throws SQLException SQL文が不正な場合や、データベースアクセスエラーが発生した場合
     */
    SqlCStatement getSqlCStatement(String sql, Connection con, final DbExecutionContext context) throws SQLException;

    /**
     * {@link SqlCStatement}を生成し返却する。
     *
     * @param sqlId SQL_ID
     * @param con Connectionオブジェクト
     * @param context DB実行時のコンテキスト
     * @return SQL_ID文を元に生成したStatementオブジェクト
     * @throws SQLException SQL文が不正な場合や、データベースアクセスエラーが発生した場合
     */
    SqlCStatement getSqlCStatementBySqlId(String sqlId, Connection con, final DbExecutionContext context) throws SQLException;

    /**
     * 可変条件を持つSQL文の可変部分を構築する。<br>
     *
     * @param sql SQL文
     * @param condition 条件をフィールドに持つオブジェクト
     * @return 可変部分を構築したSQL
     */
    String getVariableConditionSql(String sql, Object condition);

    /**
     * 可変条件を持つSQL文の可変部分を構築する。<br>
     *
     * @param sqlId SQL_Id
     * @param condition 条件をフィールドに持つオブジェクト
     * @return 可変部分を構築したSQL
     */
    String getVariableConditionSqlBySqlId(String sqlId, Object condition);

    /**
     * SQL_IDから{@link ParameterizedSqlPStatement}を生成し返却する(可変条件を持つSQL用)。
     *
     * @param sql SQL文(可変条件構築後のSQL文)
     * @param id SQL_ID
     * @param con Connectionオブジェクト
     * @param context DB実行時のコンテキスト
     * @return SQL文を元に生成したStatementオブジェクト
     * @throws SQLException SQL文が不正な場合や、データベースアクセスエラーが発生した場合
     */
    ParameterizedSqlPStatement getParameterizedSqlPStatementBySqlId(String sql, String id,
            Connection con, final DbExecutionContext context) throws SQLException;

    /**
     * SQL_IDから{@link ParameterizedSqlPStatement}を生成し返却する(可変条件を持つSQL用)。
     *
     * @param sql SQL文(可変条件構築後のSQL文)
     * @param id SQL_ID
     * @param con Connectionオブジェクト
     * @param context DB実行時のコンテキスト
     * @param selectOption 検索処理オプション
     * @return SQL文を元に生成したStatementオブジェクト
     * @throws SQLException SQL文が不正な場合や、データベースアクセスエラーが発生した場合
     */
    ParameterizedSqlPStatement getParameterizedSqlPStatementBySqlId(String sql, String id,
            Connection con, final DbExecutionContext context, SelectOption selectOption) throws SQLException;
}

